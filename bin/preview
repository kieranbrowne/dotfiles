#!/usr/bin/env python
import pygame
import fileinput
import sys
from time import sleep

pygame.init()

#functions
def getData(lines):
    data = []
    try:
        for line in lines:
            x,y,d = process(line)
            data.append((x,y,d))
    except:
        print "file does not contain the approriate data"
    return data

def process(line):
    x,y,d = 0,0,0
    try:
        coords = line.split(' ')
        x = float( coords[0] )
        y = float( coords[1] )
        d = int  ( coords[2] )
    except:
        print "Error"
    return x,y,d

def drawData(data):
    z = zip(*data)
    scale = max(max(z[0])-min(z[0]),max(z[1])-min(z[1]))
    minX = min(z[0])
    minY = min(z[1])
    del z

    line = []
    i = 0
    while i < len(data):
        while i < len(data) and data[i][2] != 0:
            line.append((
                remap(data[i][0],minX,minX+scale,0,screenSize[0]),
                remap(data[i][1],minY,minY+scale,0,screenSize[1])))
            i = i+1

        while i < len(data) and data[i][2] == 0:
            i = i+1

        if len(line) > 1:
            pygame.draw.aalines(screen,black,False,line,1)

        del line[:]

        pygame.display.update()
        sleep(.01)
            
def drawDataColour(data):
    cyan = (0,255,255)
    magenta = (255,0,255)
    yellow = (255,255,0)
    colour = (0,0,0)

    z = zip(*data)
    scale = max(max(z[0])-min(z[0]),max(z[1])-min(z[1]))
    minX = min(z[0])
    minY = min(z[1])
    del z

    line = []
    i = 0
    currentDraw = 0
    while i < len(data):
        while i < len(data) and data[i][2] == currentDraw:
            line.append((
                remap(data[i][0],minX,minX+scale,0,screenSize[0]),
                remap(data[i][1],minY,minY+scale,0,screenSize[1])))
            i = i+1

        if i < len(data):
            currentDraw = data[i][2]

        if len(line) > 1:
            if data[i-1][2] == 1:
                colour = cyan
            elif data[i-1][2] == 2:
                colour = magenta
            elif data[i-1][2] == 3:
                colour = yellow
            else:
                colour = (0,0,0)
            pygame.draw.aalines(screen,colour,False,line,1)


        del line[:]

        pygame.display.update()
        sleep(.1)
  

def remap(x, inMin,inMax,outMin,outMax):
    #range check
    if inMin == inMax or outMin == outMax:
        print "Range error"
        return None
    result = ((x - inMin) / (inMax - inMin)) * (outMax - outMin) + outMin
    return result   


#colours
black = (0,0,0)
white = (255,255,255)

#setup screen
screenSize = (800,800)
screen = pygame.display.set_mode(screenSize)
screen.fill(white)

if len(sys.argv) > 2 and sys.argv[1] in ['-c', 'color', 'colour']:
    instructions = getData(fileinput.input(sys.argv[2]))
    drawDataColour(instructions);
elif len(sys.argv) > 1:
    instructions = getData(fileinput.input(sys.argv[1]))
    drawData(instructions);


#main loop
while(True):
    pygame.display.update()
    for event in pygame.event.get():
        if event.type == pygame.QUIT or pygame.key.get_pressed()[pygame.K_ESCAPE]:
             pygame.quit(); sys.exit();
