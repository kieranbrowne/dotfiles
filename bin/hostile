#!/usr/bin/env python

''' requirements:
    xdotool
    gimp
'''

import sys
import fileinput

''' assume xdotool for linux and cliclick for mac '''
from sys import platform as _platform
if _platform == "linux" or _platform == "linux2":
    tool = 'xdotool'
elif _platform == "darwin":
    tool = 'cliclick'
elif _platform == "win32":
    tool = 'xdotool'
''' overide OS if run with flags '''
if len(sys.argv) > 2:
    if '-x' in sys.argv:
        tool = 'xdotool'
    if '-c' in sys.argv:
        tool = 'cliclick'


def isFlag(string):
    return string[0] == '-'


def getData(lines):
    data = []
    try:
        for line in lines:
            x,y,d = process(line)
            data.append((x,y,d))
    except:
        print "file does not contain the approriate data"
    return data

def process(line):
    x,y,d = 0,0,0
    try:
        coords = line.split(' ')
        x = float( coords[0] )
        y = float( coords[1] )
        d = int  ( coords[2] )
    except:
        print "Error"
    return x,y,d

def xCommands(data):

    def xMove(line): # x y draw -> "xdotool mousemove --sync x y"
        x = str(remap(line[0],minX,minX+scale,0,900))
        y = str(remap(line[1],minY,minY+scale,0,900))
        if tool == 'xdotool':
            return 'mousemove --sync '+ x +' '+y
        if tool == 'cliclick':
            return 'm:'+ x +','+y+' '
    
    def xKey(key):
        if tool == 'xdotool':
            return 'key ' + key
        if tool == 'cliclick':
            return 'kp:' + key

    def xClick(x=-1,y=-1):
        if tool == 'xdotool':
            if (x,y) == (-1,-1): return 'c:. '
            else: return 'c:'+x+','+y+' '
        if tool == 'cliclick':
            if (x,y) == (-1,-1): return 'click 1 '
            else: return 'mousemove --sync '+x+' '+y+' click 1'

    def xType(text):
        if tool == 'xdotool':
            return 'type "' + text + '"'
        if tool == 'cliclick':
            return 't:"'+text+'"'

    def xMD():
        if tool == 'xdotool':
            return 'mousedown 1'
        if tool == 'cliclick':
            return 'dd:.'

    def xMU():
        if tool == 'xdotool':
            return 'mouseup 1'
        if tool == 'cliclick':
            return 'du:.'

    def xWait(ms):
        if tool == 'xdotool':
            return 'sleep '+str(ms/1000)
        if tool == 'cliclick':
            return 'w:'+str(ms)

    commands = []
    z = zip(*data)
    scale = max(max(z[0])-min(z[0]),max(z[1])-min(z[1]))
    minX = min(z[0])
    minY = min(z[1])
    del z

    #commands.append('xdotool search "titled" windowactivate --sync mousemove --window %1 0 0 ')
    commands.append(xType('b')) # switch to paint brush tool
    commands.append(xMD())
    for line in data:
        if line[2] != 0:
            commands.append(xMove(line))

        else:
            commands.append(xMU())
            commands.append(xMove(line))
            commands.append(xMD())

    commands.append(xMU())
    return commands


def remap(x, inMin,inMax,outMin,outMax):
    #range check
    if inMin == inMax or outMin == outMax:
        print "Range error"
        return None
    result = ((x - inMin) / (inMax - inMin)) * (outMax - outMin) + outMin
    return (30 + result/1.01)


# --- MAIN --- #

sys.argv = filter(lambda x: not isFlag(x),sys.argv)
if len(sys.argv) > 1:
    instructions = getData(fileinput.input(sys.argv[1]))
    if tool == 'xdotool':
        print '\n'.join(map(lambda x:'xdotool '+x,xCommands(instructions)));
    if tool == 'cliclick':
        print 'cliclick '+' '.join(xCommands(instructions));
else:
    print "xdodraw requires input"
