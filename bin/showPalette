#!/usr/bin/env python
import sys
import re
import pygame
import pygame.gfxdraw
import fileinput



pygame.init()

size = [600,300]
screen = pygame.display.set_mode(size,pygame.NOFRAME)
screen.fill((255,255,255))

def readPalette(str):
    try: # haskell Knife syntax
        hask = re.compile(r"RGB (\d*) (\d*) (\d*)")
        palette = map(lambda (r,g,b):(int(r),int(g),int(b)),hask.findall(str))
        palette[0] # will throw exception if palette empty
    except: # css syntax
        sass = re.compile(r"rgb\((\d*),(\d*),(\d*)\)")
        palette = map(lambda (r,g,b):(int(r),int(g),int(b)),sass.findall(str))

    return palette
        




def drawPalette(palette):
    for col in palette:
        y = size[1]/2
        x = size[0]/(len(palette)+1) * (palette.index(col)+1)
        try:
            pygame.gfxdraw.aacircle(screen, x,y, 40, col)
            pygame.gfxdraw.filled_circle(screen, x,y, 40, col)
        except:
            pygame.draw.circle(screen, col,[x,y],40,0)

    pygame.display.flip()

try:
    for line in fileinput.input():
        drawPalette(readPalette(line))
        print fileinput.input()
except:
    line = ' '.join(sys.argv[1:])
    drawPalette(readPalette(line))
    print line

running = True
while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT or event.type == pygame.KEYDOWN:
            running = False
